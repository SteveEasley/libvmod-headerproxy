varnishtest "Test background fetch"

# The issue is a bgfetch calls vcl_backend_fetch then vcl_backend_response, both
# of which resume the vmod request. But vcl_deliver will have released the
# vmod request by then. Also I think vcl_backend_response calls vcl_synth on
# completion (NO)? Or maybe its a special version of it.

server s1 {
    rxreq
    txresp -hdr "Content-Type: application/json" -body {{"vcl_deliv":["x-deliv: deliv1"]}}

    accept
    rxreq
    txresp -hdr "Content-Type: application/json" -body {{"vcl_deliv":["x-deliv: deliv2"]}}

    accept
    rxreq
    txresp -hdr "Content-Type: application/json" -body {{"vcl_deliv":["x-deliv: deliv3"]}}
} -start

server s2 {
    rxreq
    txresp -hdr "server: 1"

    accept
    rxreq
    delay 1
    txresp -hdr "server: bgfetch"
} -start

server s3 {
    rxreq
    txresp -hdr "server: 2"
} -start

varnish v1 -vcl+backend {
    import headerproxy from "${vmod_topbuild}/src/.libs/libvmod_headerproxy.so";

    sub vcl_recv {
        headerproxy.backend(s1);
        set req.backend_hint = s2;

        if (req.http.client == "3") {
            set req.backend_hint = s3;
        }

        headerproxy.call();
    }

    sub vcl_backend_fetch {
        headerproxy.process();
    }

    sub vcl_backend_response {
        headerproxy.process();

        if (bereq.http.client == "1") {
            set beresp.do_stream = false;
            set beresp.ttl = 1s;
            set beresp.grace = 1800s;
        }
    }

    sub vcl_backend_error {
        headerproxy.process();
    }

    sub vcl_deliver {
        headerproxy.process();
    }

    sub vcl_synth {
        headerproxy.process();
    }
} -start

client c1 {
    txreq -url "/" -hdr "client: 1"
    rxresp
    expect resp.http.server == "1"
    expect resp.http.x-deliv == "deliv1"
} -run

delay 2

# This request will generate a background refresh to s2 which will fail and
# call vcl_backend_error. c1 should receive a good cached response.
client c1 {
    txreq -url "/" -hdr "client: 2"
    rxresp
    expect resp.http.server == "1"
    expect resp.http.x-deliv == "deliv2"
} -run

delay .5

# This request will be directed to s3 and re-attempt another background refresh
# Again c1 should receive a cached response
client c1 {
    txreq -url "/" -hdr "client: 3"
    rxresp
    expect resp.http.server == "1"
    expect resp.http.x-deliv == "deliv3"
} -run
